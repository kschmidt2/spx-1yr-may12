Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdSpx1Yr=document.getElementById("chart-container-spx-1yr");function drawHighcharts(){Highcharts.chart(chartIdSpx1Yr,{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1zlXn2MJT0q39pO34jMfHRJhvx8aJ0jcC0y7ZdCUKnrg"},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5,plotBands:[{from:1582142415e3,to:1584993615e3,label:{text:"<b>-34%</b>",align:"right",y:-5}}]},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow",formatter:function(){return Highcharts.numberFormat(this.value,0,".",",")}}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdSpx1Yr.innerHTML){let e=document.getElementsByClassName("chart-area-spx-1yr");for(var t=0;t<e.length;t++)e[t].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiSGlnaGNoYXJ0cyIsInNldE9wdGlvbnMiLCJsYW5nIiwidGhvdXNhbmRzU2VwIiwiY2hhcnRJZFNweDFZciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkcmF3SGlnaGNoYXJ0cyIsImNoYXJ0IiwidHlwZSIsInN0eWxlZE1vZGUiLCJzcGFjaW5nQm90dG9tIiwic3BhY2luZ1JpZ2h0Iiwic3BhY2luZ0xlZnQiLCJzcGFjaW5nVG9wIiwidGl0bGUiLCJ0ZXh0IiwiZGF0YSIsImdvb2dsZVNwcmVhZHNoZWV0S2V5IiwicGxvdE9wdGlvbnMiLCJzZXJpZXMiLCJncm91cFBhZGRpbmciLCJsZWdlbmQiLCJlbmFibGVkIiwieEF4aXMiLCJsYWJlbHMiLCJzdHlsZSIsIndoaXRlU3BhY2UiLCJ0aWNrTGVuZ3RoIiwicGxvdEJhbmRzIiwiZnJvbSIsInRvIiwibGFiZWwiLCJhbGlnbiIsInkiLCJ5QXhpcyIsInVzZUhUTUwiLCJvdmVyZmxvdyIsImZvcm1hdHRlciIsIm51bWJlckZvcm1hdCIsInRoaXMiLCJ2YWx1ZSIsImNyZWRpdHMiLCJ0b29sdGlwIiwic2hhZG93IiwicGFkZGluZyIsInJlc3BvbnNpdmUiLCJydWxlcyIsImNvbmRpdGlvbiIsIm1heFdpZHRoIiwiY2hhcnRPcHRpb25zIiwieCIsInNldFRpbWVvdXQiLCJpbm5lckhUTUwiLCJjaGFydEFyZWEiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaSIsImxlbmd0aCIsImRpc3BsYXkiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBUUFBLFdBQUFDLFdBQUEsQ0FDQUMsS0FBQSxDQUNBQyxhQUFBLE9BSUEsSUFBQUMsY0FBQUMsU0FBQUMsZUFBQSwyQkFpQkEsU0FBQUMsaUJBQ0FQLFdBQUFRLE1BQUFKLGNBQUEsQ0FDQUksTUFBQSxDQUNBQyxLQUFBLE9BQ0FDLFlBQUEsRUFDQUMsY0FBQSxHQUNBQyxhQUFBLElBQ0FDLFlBQUEsRUFDQUMsV0FBQSxJQUVBQyxNQUFBLENBQ0FDLEtBQUEsTUFFQUMsS0FBQSxDQUNBQyxxQkFBQSxnREFHQUMsWUFBQSxDQUNBQyxPQUFBLENBQ0FDLGFBQUEsS0FvQkFDLE9BQUEsQ0FDQUMsU0FBQSxHQUVBQyxNQUFBLENBQ0FDLE9BQUEsQ0FDQUMsTUFBQSxDQUNBQyxXQUFBLFdBR0FDLFdBQUEsRUFDQUMsVUFBQSxDQUFBLENBQ0FDLEtBQUEsYUFDQUMsR0FBQSxhQUNBQyxNQUFBLENBQ0FoQixLQUFBLGNBQ0FpQixNQUFBLFFBQ0FDLEdBQUEsTUFTQUMsTUFBQSxDQUNBcEIsT0FBQSxFQUNBVSxPQUFBLENBQ0FXLFNBQUEsRUFDQUMsU0FBQSxRQUNBQyxVQUFBLFdBQ0EsT0FBQXRDLFdBQUF1QyxhQUFBQyxLQUFBQyxNQUFBLEVBQUEsSUFBQSxRQUtBQyxRQUFBLENBQ0FuQixTQUFBLEdBRUFvQixRQUFBLENBQ0FDLFFBQUEsRUFDQUMsUUFBQSxJQUVBQyxXQUFBLENBQ0FDLE1BQUEsQ0FBQSxDQUNBQyxVQUFBLENBQ0FDLFNBQUEsS0FFQUMsYUFBQSxDQUNBMUMsTUFBQSxDQUNBSSxhQUFBLElBRUFVLE9BQUEsQ0FDQVcsTUFBQSxPQUNBa0IsR0FBQSxJQUVBUixRQUFBLENBQ0FwQixTQUFBLFNBOUdBNkIsV0FBQSxXQUNBLEdBQUEsS0FBQWhELGNBQUFpRCxVQUFBLENBRUEsSUFBQUMsRUFBQWpELFNBQUFrRCx1QkFBQSxzQkFDQSxJQUFBLElBQUFDLEVBQUEsRUFBQUEsRUFBQUYsRUFBQUcsT0FBQUQsSUFDQUYsRUFBQUUsR0FBQTlCLE1BQUFnQyxRQUFBLE9BR0FyRCxTQUFBQyxlQUFBLGtCQUFBK0MsV0FBQSw0SUFJQSxLQTBHQSxhQUFBaEQsU0FBQXNELFlBQUEsZ0JBQUF0RCxTQUFBc0QsV0FDQXBELGlCQUVBRixTQUFBdUQsaUJBQUEsbUJBQUFyRCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYWRkcyBzb2NpYWwgY2xhc3MgdG8gZ2V0IHNvY2lhbCBjaGFydFxuLy8gbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2hhcnQtYXJlYVwiKTtcbi8vIGZvcih2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKVxuLy8ge1xuLy8gICAgIGVsZW1lbnRbaV0uY2xhc3NOYW1lICs9IFwiIHNvY2lhbFwiO1xuLy8gfVxuXG5cbkhpZ2hjaGFydHMuc2V0T3B0aW9ucyh7XG4gICAgbGFuZzoge1xuICAgICAgdGhvdXNhbmRzU2VwOiAnLCdcbiAgICB9XG59KTtcblxubGV0IGNoYXJ0SWRTcHgxWXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoYXJ0LWNvbnRhaW5lci1zcHgtMXlyXCIpO1xuXG4vLyBjaGVja3MgZm9yIHRoZSBjaGFydCBJRCBhbmQgZGlzcGxheXMgYSBiYWNrdXAgaW1hZ2UgaWYgdGhlIGJyb3dzZXIgY2FuJ3QgZmluZCBpdFxuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBpZihjaGFydElkU3B4MVlyLmlubmVySFRNTCA9PT0gXCJcIikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbm9JZCcpO1xuICAgICAgICBsZXQgY2hhcnRBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNoYXJ0LWFyZWEtc3B4LTF5clwiKTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNoYXJ0QXJlYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2hhcnRBcmVhW2ldLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfSBcbiAgICAgICAgLy8gaW5zZXJ0IGNoYXJ0IHNjcmVlbnNob3QgaGVyZVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoYXJ0LWZhbGxiYWNrXCIpLmlubmVySFRNTCArPSAnPGltZyBzcmM9XCJodHRwczovL2ZtLXN0YXRpYy5jbmJjLmNvbS9hd3NtZWRpYS9jaGFydC8yMDE5LzEwLzA4L2NoYXJ0LWVycm9yX3dpZGUuMTU3MDU2OTMzMTI1Mi5wbmdcIiBzdHlsZT1cIndpZHRoOiAxMDAlO21heC13aWR0aDo2NjBweFwiPic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3llc0lkJylcbiAgICB9XG59LDUwMCk7XG5cbmZ1bmN0aW9uIGRyYXdIaWdoY2hhcnRzKCkge1xuICAgIEhpZ2hjaGFydHMuY2hhcnQoY2hhcnRJZFNweDFZciwge1xuICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgc3R5bGVkTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIHNwYWNpbmdCb3R0b206IDI1LFxuICAgICAgICAgICAgc3BhY2luZ1JpZ2h0OiAxMDAsXG4gICAgICAgICAgICBzcGFjaW5nTGVmdDogMCxcbiAgICAgICAgICAgIHNwYWNpbmdUb3A6IDIwXG4gICAgICAgIH0sIFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBnb29nbGVTcHJlYWRzaGVldEtleTogJzF6bFhuMk1KVDBxMzlwTzM0ak1mSFJKaHZ4OGFKMGpjQzB5N1pkQ1VLbnJnJ1xuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgYmFyIGNoYXJ0cyBvbmx5XG4gICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgICAgICBncm91cFBhZGRpbmc6IDAuMVxuICAgICAgICAgICAgfSBcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGxpbmUgY2hhcnRzIG9ubHlcbiAgICAgICAgLy8gcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgLy8gICAgIHNlcmllczoge1xuICAgICAgICAvLyAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgLy8gICAgICAgICAvLyBjbGlwOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgICAgIHN5bWJvbDogJ2NpcmNsZScsXG4gICAgICAgIC8vICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICAvLyAgICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZidcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlja0xlbmd0aDogNSxcbiAgICAgICAgICAgIHBsb3RCYW5kczogW3tcbiAgICAgICAgICAgICAgICBmcm9tOiAxNTgyMTQyNDE1MDAwLFxuICAgICAgICAgICAgICAgIHRvOiAxNTg0OTkzNjE1MDAwLFxuICAgICAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICc8Yj4tMzQlPC9iPicsXG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICB5OiAtNVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgLy8gZWRpdHMgeEF4aXMgdGlja3NcbiAgICAgICAgICAgIC8vIGRhdGVUaW1lTGFiZWxGb3JtYXRzOiB7XG4gICAgICAgICAgICAvLyAgICAgd2VlazogJyViLiAlZScsXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhpZ2hjaGFydHMubnVtYmVyRm9ybWF0KHRoaXMudmFsdWUsMCwnLicsJywnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGFkZHMgY29tbWFzIHRvIHRob3VzYW5kc1xuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBzaGFkb3c6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzogMTBcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2l2ZToge1xuICAgICAgICAgICAgcnVsZXM6IFt7XG4gICAgICAgICAgICBjb25kaXRpb246IHtcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogNTAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhcnRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgeDogLTE4XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdpbnRlcmFjdGl2ZScpIHtcbiAgICBkcmF3SGlnaGNoYXJ0cygpO1xufSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBkcmF3SGlnaGNoYXJ0cyk7XG59Il19
